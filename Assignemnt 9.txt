Briefly describe the concept of "Stack Frame" (1 through 5 points depending on quality of the answer)
	A stack frame is an area of the stack that is set aside for passed arguents, subroutine return addresses
	local vaiables and saved registers. The stack frame for each routine is divided into three parts: function parameters, 
	back-pointer to the previous stack frame, and local variables.

Briefly describe the concept of a "Calling Convention" (1 through 5 points depending on quality of the answer)
	Calling conventions are a standardized way of deciding where to put parameters and how they should get there. 

Why do the book examples always start functions with "push ebp" and "mov ebp,esp" (2 points)
	Because that is how you create the stack frame in 32 bit masm

 What is the x64 equivalent to "push ebp" and "mov ebp,esp)" (2 points)
	push rbp and mov rbp,rsp

What are the differences between "Microsoft x64 calling convention" and "System V AMD64 ABI calling convention"
	Microsoft x64 is used by microsoft while system V AMD64 is used by macOS linux and other linux distributions
	Microsoft x64 uses shadowspace, which must be allocated manually 
	They also use different registers

Upon entry to myFunction (above), what does the stack look like when using Microsoft x64 calling convention? (3 points)
	a in RCX, b in RDX, c in R8, d in R9, e and f pushed on stack  

Upon entry to myFunction (above), what does the stack look like when using stdcall convention (3 points)
	a in eax,b in ecx,c in edx, d,e,f pushed on the stack

